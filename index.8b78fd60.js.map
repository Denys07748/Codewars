{"mappings":"AAgBA,IAuDkBA,EAAOC,EAAKC,EAnD9BC,QAAQC,IACI,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,IACb,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,KARNC,SAAQC,GAAKA,EAAI,KAAIC,KAAK,OA6BzCJ,QAAQC,IAVR,SAA0BI,GACxB,MAAMC,EAAUD,EAAIE,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACvC,IAAIC,EAAM,EAEV,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAQM,OAAS,EAAGD,IACtCD,GAAOJ,EAAQK,EAAI,GAAKL,EAAQK,GAElC,OAAOD,EAIPG,CAAiB,EAAC,GAAK,GAAG,GAAK,EAAG,IAAI,IAAK,GAAK,GAAG,IAAK,IAAK,GAAI,GAAI,KA+BvEb,QAAQC,KAPUJ,EAOG,CAAC,EAAG,EAAG,EAAG,GAPNC,EAOU,CAAC,EAAG,EAAG,EAAG,GAPfC,EAOmB,CAAC,EAAG,EAAG,GAAI,IALxDe,KAAKC,OAAOlB,GAASiB,KAAKE,OAAOlB,IACjCgB,KAAKC,OAAOlB,GAASiB,KAAKE,OAAOjB,KA8BrCC,QAAQC,IAZR,SAAqBgB,EAAMC,GACzB,MAAMb,EAAM,GACZ,IAAK,IAAIM,EAAI,EAAGA,GAAKM,EAAMN,KAEtBA,EAAI,IAAIQ,MAAM,IAAIC,QAAO,CAACC,EAAKC,IAAOD,EAAMP,KAAKS,KAAKD,EAAIJ,IAAM,KAAOP,GAExEN,EAAImB,KAAKb,GAGb,OAAON,EAGGoB,CAAY,IAAK","sources":["src/task1_1.js"],"sourcesContent":["// 1. CSV representation of array\n\n// Создайте функцию, которая возвращает CSV-представление двумерного числового массива.\n\n// Example: input: [\n//   [0, 1, 2, 3, 4],\n//   [10, 11, 12, 13, 14],\n//   [20, 21, 22, 23, 24],\n//   [30, 31, 32, 33, 34],\n// ];\n\n// output: '0,1,2,3,4\\n' +\n//   '10,11,12,13,14\\n' +\n//   '20,21,22,23,24\\n' +\n//   '30,31,32,33,34';\n\nfunction toCsvText(array) {\n  return array.flatMap(e => e + '').join('\\n');\n}\n\nconsole.log(\n  toCsvText([\n    [0, 1, 2, 3, 45],\n    [10, 11, 12, 13, 14],\n    [20, 21, 22, 23, 24],\n    [30, 31, 32, 33, 34],\n  ])\n);\n\n// 2. Sum of differences in array\n\n// Ваша задача — просуммировать различия между последовательными парами в массиве в порядке убывания.\n\n// Пример\n// [2, 1, 10]  -->  9\n\nfunction sumOfDifferences(arr) {\n  const arrSort = arr.sort((a, b) => a - b);\n  let sum = 0;\n\n  for (let i = 0; i < arrSort.length - 1; i++) {\n    sum += arrSort[i + 1] - arrSort[i];\n  }\n  return sum;\n}\n\nconsole.log(\n  sumOfDifferences([-13, 4, -19, 5, 15, -12, -20, 1, -13, -10, -7, -9, -5])\n);\n\n// 3. Another card game\n\n// Двенадцать карточек с оценками от 0 до 11, случайным образом разделенных между 3 игроками:\n// Фрэнком, Сэмом и Томом, по 4 карточки каждому. Игра состоит из 4 раундов.\n// Цель раунда — пройти по карте с наибольшим количеством очков.\n// В первом раунде первый игрок, у которого есть карта с 0 очков, делает первый ход,\n// и он начинает с этой картой. Затем второй игрок (очередь — Фрэнк -> Сэм -> Том -> Фрэнк и т. д.)\n// может ходить любой своей картой (каждая карта используется только один раз за игру,\n// и нет правил, требующих от игроков делать только лучшие ходы).\n// Третий игрок делает свой ход после второго игрока, и он видит предыдущие ходы.\n// Победитель предыдущего раунда делает первый ход в следующем раунде любой оставшейся картой.\n// Игрок, выигравший 2 раунда первым, побеждает в игре.\n\n// Задача\n// Верните true, если у Фрэнка есть шанс выиграть игру.\n// Верните false, если у Фрэнка нет шансов.\n\n// Вход\n// 3 массива по 4 уникальных числа в каждом (числа в массиве отсортированы по возрастанию).\n// Ввод всегда действителен, не нужно проверять.\n\nfunction solution(frank, sam, tom) {\n  return (\n    Math.max(...frank) > Math.min(...sam) &&\n    Math.max(...frank) > Math.min(...tom)\n  );\n}\n\nconsole.log(solution([0, 1, 4, 5], [2, 6, 7, 8], [3, 9, 10, 11]));\n\n// 4.Numbers Which Sum of Powers of Its Digits Is The Same Number\n\n// Не считая числа 1, число 153 является первым целым числом, обладающим этим свойством:\n// сумма третьей степени каждой его цифры равна 153. Посмотрите: 153 = 1³ + 5³ + 3³ = 1 + 125 + 27. = 153\n\n// Следующее число, которое экспериментирует с этим конкретным поведением, — 370 с той же мощностью.\n\n// Напишите функцию eq_sum_powdig(), которая находит числа ниже заданного верхнего предела hMax (включительно),\n// удовлетворяющие этому свойству, но с разными показателями степени в качестве степени цифр.\n\n// eq_sum_powdig(hMax, exp): ----> последовательность чисел (отсортированный список) (номер один не должен учитываться).\n\nfunction eqSumPowdig(hMax, exp) {\n  const arr = [];\n  for (let i = 2; i <= hMax; i++) {\n    if (\n      (i + '').split('').reduce((pre, el) => pre + Math.pow(+el, exp), 0) === i\n    ) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\nconsole.log(eqSumPowdig(370, 3));\n"],"names":["frank","sam","tom","console","log","flatMap","e","join","arr","arrSort","sort","a","b","sum","i","length","$aa0dc79a28274d23$var$sumOfDifferences","Math","max","min","hMax","exp","split","reduce","pre","el","pow","push","$aa0dc79a28274d23$var$eqSumPowdig"],"version":3,"file":"index.8b78fd60.js.map"}