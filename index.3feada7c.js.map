{"mappings":"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","sources":["src/index.js"],"sourcesContent":["// 1. Convert string to camel case\n\n// Завершите метод/функцию, чтобы он преобразовывал слова, разделенные\n// тире/подчеркиванием, в верблюжий регистр. Первое слово в выводе должно\n// быть написано с заглавной буквы только в том случае, если исходное\n// слово было написано с заглавной буквы (известный как верхний верблюжий\n// регистр, также часто называемый регистром Паскаля).\n\n// Examples\n// \"the-stealth-warrior\" gets converted to \"theStealthWarrior\"\n// \"The_Stealth_Warrior\" gets converted to \"TheStealthWarrior\"\n\nfunction toCamelCase(str) {}\n\n// 2.Count Odd Numbers below n\n\n// Учитывая число n, вернуть количество положительных нечетных чисел меньше n\n\n// Examples (Input -> Output)\n// 7  -> 3 (because odd numbers below 7 are [1, 3, 5])\n// 15 -> 7 (because odd numbers below 15 are [1, 3, 5, 7, 9, 11, 13])\n\nfunction oddCount(n) {\n  const arrey = [];\n\n  for (let i = 1; i < n; i += 1) {\n    if (i % 2 !== 0) {\n      arrey.push(i);\n    }\n  }\n\n  return arrey.length;\n}\n\n// describe('Basic tests', () => {\n//   it('Testing for fixed tests', () => {\n//     assert.strictEqual(oddCount(15), 7, 'Oops! Wrong.');\n//     assert.strictEqual(oddCount(15023), 7511, 'Oops! Wrong.');\n//   });\n// });\nconsole.log(oddCount(7));\n\n//3. Remove anchor from URL\n\n// Завершите функцию/метод, чтобы он возвращал URL-адрес с чем-либо после удаления привязки (#).\n\n// Examples\n// \"www.codewars.com#about\" --> \"www.codewars.com\"\n// \"www.codewars.com?page=1\" -->\"www.codewars.com?page=1\"\n\nfunction removeUrlAnchor(url) {\n  let arrey = url.split('');\n\n  if (arrey.includes('#')) {\n    const index = arrey.indexOf('#');\n    arrey = arrey.slice(0, index);\n  }\n\n  return arrey.join('');\n}\n\nconsole.log(removeUrlAnchor('www.codewars.com#about'));\n//   'www.codewars.com'\n\nconsole.log(removeUrlAnchor('www.codewars.com/katas/?page=1#about')),\n  //   'www.codewars.com/katas/?page=1'\n\n  console.log(removeUrlAnchor('www.codewars.com/katas/'));\n//   'www.codewars.com/katas/'\n\n// 4. Reversed Words\n\nfunction reverseWords(str) {\n  const arrey = str.split(' ');\n  const arreyReverse = [];\n  let indexLastWord = arrey.length - 1;\n\n  console.log(arrey);\n  arrey.map(() => {\n    arreyReverse.push(arrey[indexLastWord]);\n    indexLastWord -= 1;\n  });\n\n  console.log(arreyReverse);\n\n  str = arreyReverse.join(' ');\n\n  console.log(str);\n\n  return str; // reverse those words\n}\n\n// function reverseWords(str) {\n//   return str.split(' ').reverse().join(' ');\n// }\n\nconsole.log(reverseWords('hello world!'));\n\n// 5.N-th Power\n\n// Вам дан массив с положительными числами и неотрицательным числом N.\n// Нужно найти N-ю степень элемента в массиве с индексом N. Если N вне\n// массива, то вернуть -1. Не забывайте, что первый элемент имеет индекс 0.\n\nfunction index(array, n) {\n  if (!array[n]) {\n    return -1;\n  }\n  let result = array[n];\n\n  for (let i = 1; i < n; i++) {\n    result *= array[n];\n  }\n\n  return result;\n}\n\n// const index = (array, n) => array.length > n ? Math.pow(array[n], n) : -1;\n\nconsole.log(index([1, 3, 10, 100], 3));\n\n// 6.Shortest Word\n\n// Просто, учитывая строку слов, вернуть длину кратчайшего слова (слов).\n\n// Строка никогда не будет пустой, и вам не нужно учитывать разные типы данных.\n\nfunction findShort(s) {\n  const array = s.split(' ');\n  let minWord = array[0];\n\n  array.map(el => {\n    if (minWord.length > el.length) {\n      minWord = el;\n    }\n  });\n  return minWord.length;\n}\n\nconsole.log(findShort('bitcoin take over the world maybe who knows perhaps'));\n\n// 7.Quarter of the year\n\n// Дан месяц как целое число от 1 до 12, вернитесь к тому,\n// к какому кварталу года он принадлежит, как целое число.\n\n// Например: 2-й месяц (февраль) является частью первого квартала;\n// 6 месяц (июнь) входит во второй квартал; и месяц 11 (ноябрь) является частью четвертого квартала.\n\nconst quarterOf = month => {\n  if (month > 0 && month < 4) {\n    return 1;\n  } else if (month > 3 && month < 7) {\n    return 2;\n  } else if (month > 6 && month < 10) {\n    return 3;\n  } else if (month > 9) {\n    return 4;\n  }\n};\n\nconsole.log(quarterOf(7));\n\n// 7.Hamming Distance - Part 1: Binary codes\n\n// Расстояние Хэмминга двух строк одинаковой длины — это количество позиций,\n// в которых эти две строки различаются. Другими словами,\n// количество замен символов, необходимых для преобразования одной строки в другую.\n\n// Для этой первой Ката вы напишете функцию hamming_distance(a, b) с двумя строками\n// одинаковой длины, содержащими только 0 и 1 в качестве параметров.\n// Нет необходимости проверять параметры на достоверность (но вы можете, если хотите).\n// Выходом функции должно быть расстояние Хэмминга двух строк в виде целого числа.\n\nfunction hammingDistance(a, b) {\n  const array1 = a.split('');\n  const array2 = b.split('');\n  let total = 0;\n\n  array1.map((el, i, array) => {\n    if (el !== array2[i]) {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nconsole.log(hammingDistance('1010', '0101'));\n\n// 8. Reverse words\n\n// Завершите функцию, которая принимает строковый параметр и переворачивает\n// каждое слово в строке. Все пробелы в строке должны быть сохранены.\n\nfunction reverseWordsLetters(str) {\n  const array = str.split(' ');\n  const arrayReverse = [];\n\n  array.map(word => arrayReverse.push(word.split('').reverse().join('')));\n\n  return arrayReverse.join(' ');\n}\n\nconsole.log(\n  reverseWordsLetters('The quick brown fox jumps over the lazy dog.')\n);\n\n// 9.Square Every Digit\n\n// Добро пожаловать. В этой ката вас просят возвести в квадрат каждую цифру числа и соединить их.\n\n// Например, если мы пропустим через функцию 9119, получится 811181, потому что 92 — это 81, а 12 — это 1.\n\n// Примечание. Функция принимает целое число и возвращает целое число.\n\nfunction squareDigits(num) {\n  const arraySquareEvDigit = [];\n  const numString = num + '';\n\n  console.log(numString);\n\n  numString.split('').map(digit => arraySquareEvDigit.push(digit ** 2));\n\n  console.log(arraySquareEvDigit);\n\n  return Number(arraySquareEvDigit.join(''));\n}\n\nconsole.log(squareDigits(3212));\n\n// 10.Don't give me five!\n\n// В этом ката вы получаете начальный номер и конечный номер региона и\n// должны вернуть количество всех чисел, кроме номеров с 5 в нем.\n// Начальный и конечный номер включительно!\n// Результат может содержать пятерки. ;-)\n// Начальный номер всегда будет меньше конечного. Оба числа могут быть и отрицательными!\n\nfunction dontGiveMeFive(start, end) {\n  const array = [];\n  for (let i = start; i <= end; i++) {\n    const str = i + '';\n    if (!str.split('').includes('5')) {\n      array.push(i);\n    }\n  }\n  return array.length;\n}\n\nconsole.log(dontGiveMeFive(4, 17));\n\n// 11.DNA to RNA Conversion\n\n// Рибонуклеиновая кислота, РНК, является основной молекулой-мессенджером в клетках.\n// РНК немного отличается от ДНК своей химической структурой и не содержит тимина.\n// В РНК тимин заменен другой нуклеиновой кислотой урацилом («U»).\n\n// Создайте функцию, которая переводит заданную строку ДНК в РНК.\n\n// function DNAtoRNA(dna) {\n//   return dna.replace(/T/g, 'U');\n// }\n\nfunction DNAtoRNA(dna) {\n  return dna.split('T').join('U');\n}\n\n// 12.Strong Number (Special Numbers Series #2)\n\n//Сильное число — это число, сумма факториала его цифр равна самому числу.\n// Например, 145 сильно, так как 1! + 4! + 5! = 1 + 24 + 120 = 145.\n// Учитывая число, найдите, является ли оно сильным или нет, и верните либо «СИЛЬНОЕ !!!!» или \"Не Сильный!!\".\n\nfunction strong(n) {\n  const total = String(n)\n    .split('')\n    .reduce((previousValue, value) => {\n      let factorial = 1;\n      for (let i = 1; i <= value; i++) {\n        factorial *= i;\n      }\n      return previousValue + factorial;\n    }, 0);\n\n  return n === total ? 'STRONG!!!!' : 'Not Strong !!';\n}\n\nconsole.log(strong(145));\n\n// 13.Wilson primes\n\n// Простые числа Вильсона удовлетворяют следующему условию. Пусть P представляет собой простое число.\n// Затем, ((P-1)! + 1) / (P * P)\n// должен дать целое число.\n// Ваша задача — создать функцию, возвращающую истину, если заданное число является простым числом Вильсона.\n\nfunction amIWilson(p) {\n  let factorial = 1;\n  for (let i = 1; i < p; i++) {\n    factorial *= i;\n  }\n  return (factorial + 1) % p ** 2 === 0 ? true : false;\n}\n\nconsole.log(amIWilson(5));\n\n// 14.Area of a Square\n\n// Завершите функцию, которая вычисляет площадь красного квадрата,\n// когда в качестве входных данных задана длина дуги окружности A.\n// Возвращает результат, округленный до двух знаков после запятой.\n\nfunction squareArea(A) {\n  return Number((((180 * A) / (Math.PI * 90)) ** 2).toFixed(2));\n}\n\nconsole.log(squareArea(14.05));\n\n// 15.Deodorant Evaporator\n\n// Эта программа проверяет срок службы испарителя, содержащего газ.\n\n// Мы знаем содержимое испарителя (содержимое в мл), процент пены или газа,\n// теряемый каждый день (evap_per_day) и пороговое значение (threshold) в процентах,\n// выше которого испаритель становится бесполезным. Все числа строго положительные.\n\n// Программа сообщает n-й день (в виде целого числа), когда испаритель не будет использоваться.\n\n// Example:\n// evaporator(10, 10, 5) -> 29\n\n// Примечание:\n// Содержимое по сути не обязательно в теле функции \"испаритель\",\n// вы можете использовать его или не использовать, как хотите.\n// Кто-то предпочитает рассуждать содержанием, кто-то — только процентами.\n// Это зависит от вас, но вы должны оставить его в качестве параметра,\n// потому что тесты используют его в качестве аргумента.\n\n// function evaporator(content, evap_per_day, threshold) {\n//   const thresholdMl = content * (threshold / 100);\n//   let currentAmount = content;\n//   let days = 0;\n//   let counter = content * (evap_per_day / 100);\n//   console.log(thresholdMl, currentAmount, counter);\n\n//   for (let i = currentAmount; i > thresholdMl; i -= counter) {\n//     days++;\n//     currentAmount -= currentAmount * (evap_per_day / 100);\n//     counter = currentAmount * (evap_per_day / 100);\n//     console.log(currentAmount);\n//   }\n//   return days;\n// }\n\nfunction evaporator(content, evap_per_day, threshold) {\n  var days = 0;\n  var gas = 100;\n  while (gas >= threshold) {\n    gas -= (gas * evap_per_day) / 100;\n    days++;\n  }\n  return days;\n}\n\nconsole.log(evaporator(10, 10, 5));\n\n// 16.The Poet And The Pendulum\n\n// Задача\n// Учитывая массив/список [] из n целых чисел, расположите их так же, как движение маятника туда-сюда.\n\n// Наименьший элемент списка целых чисел должен находиться в центре массива/списка.\n\n// Высшее, чем наименьшее, идет вправо.\n// Следующее большее число идет слева от минимального числа и так далее, туда-сюда, как в маятнике.\n\n// способ 1 (свой)\n// function pendulum(values) {\n//   let val = [...values];\n//   let newArr = [];\n//   for (let i = 1; i <= values.length; i++) {\n//     let minInd = val.indexOf(Math.min(...val));\n//     let arr = val.splice(minInd, 1);\n//     i % 2 === 0 ? (newArr = newArr.concat(arr)) : (newArr = arr.concat(newArr));\n//   }\n//   return newArr;\n// }\n\n// способ 2\n// function pendulum(values) {\n//   let sort = values.slice().sort((a, b) => a - b),\n//     parts = { left: [], right: [] };\n\n//   for (let i = 0; i < sort.length; i++)\n//     parts[i % 2 ? 'right' : 'left'].push(sort[i]);\n\n//   return parts.left.reverse().concat(parts.right);\n// }\n\n// способ 3\n// const pendulum = values =>\n//   values\n//     .sort((a, b) => a - b)\n//     .reduce((pre, val) => (pre.length % 2 ? [...pre, val] : [val, ...pre]), []);\n\n// способ 4\nfunction pendulum(a) {\n  let list = [],\n    arr = [];\n  a.sort((b, c) => b - c).forEach((e, i) => (i % 2 ? arr : list).push(e));\n  console.log(list, arr);\n  return list.reverse().concat(arr);\n}\n\nconsole.log(pendulum([8, 7, 10, 3]));\nconsole.log(pendulum([27, 27, 19, 21, 22, 28, 24]));\n\n// 17.Determine if the poker hand is flush\n\n// Определите, является ли покерная рука флешем, то есть являются ли пять карт одной масти.\n\n// Вашей функции будет передан список/массив из 5 строк, каждая из которых представляет\n// покерную карту в формате «5H» (пятерка червей), что означает значение карты, за которым\n// следует начальная буква ее масти (червы, пики, бубны или клубы). Джокеры не включены.\n\n// Ваша функция должна возвращать true, если рука представляет собой флеш, и false в противном случае.\n\nfunction isFlush(cards) {\n  const suitFirst = cards[0][cards[0].length - 1];\n  let boolean = true;\n\n  cards.map(e => {\n    let suit = e[e.length - 1];\n    suitFirst === suit ? boolean : (boolean = false);\n  });\n\n  return boolean;\n}\n\n// способ 2\n// function isFlush(cards) {\n//   return cards.every(a => cards[0].slice(-1) === a.slice(-1));\n// }\n\nconsole.log(isFlush(['AS', '3S', '9S', 'KS', '4S']));\nconsole.log(isFlush(['AD', '4S', '7H', 'KC', '5S']));\n\n// 18.Expressions Matter\n\n// Даны три целых числа a ,b ,c, вернуть наибольшее число,\n// полученное после вставки следующих операторов и скобок: +, *, ()\n// Другими словами, попробуйте каждую комбинацию a,b,c с [*+()]\n// и верните максимальное полученное значение\n\n// Заметки\n// Цифры всегда положительные.\n// Числа находятся в диапазоне (1  ≤  a, b, c  ≤  10).\n// Вы можете использовать одну и ту же операцию более одного раза.\n// Необязательно расставлять все знаки и скобки.\n// Возможно повторение цифр.\n// Вы не можете поменять местами операнды.\n// Например, в данном примере нельзя получить выражение (1 + 3) * 2 = 8.\n\nfunction expressionMatter(a, b, c) {\n  return Math.max(a + b + c, a * (b + c), a * b * c, a + b * c, (a + b) * c);\n}\n\nconsole.log(expressionMatter(2, 1, 3));\nconsole.log(expressionMatter(2, 1, 1));\n\n// 19.Removing Elements\n\n// Возьмите массив и удалите каждый второй элемент из массива.\n// Всегда сохраняйте первый элемент и начинайте удаление со следующего элемента.\n\nfunction removeEveryOther(arr) {\n  return arr.filter((el, ind) => ind % 2 === 0);\n}\n\nconsole.log(removeEveryOther([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n\n// 20.Total amount of points\n\n//Результаты матчей нашей команды записываются в виде набора строк.\n// Каждое совпадение представлено строкой в ​​формате «x:y»,\n// где x — это счет нашей команды, а y — счет наших противников.\n\n// Например: [\"3:1\", \"2:2\", \"0:1\", ...]\n\n// Очки за каждый матч начисляются следующим образом:\n\n// если x > y: 3 очка (победа)\n// если x < y: 0 очков (проигрыш)\n// если x = y: 1 балл (ничья)\n// Нам нужно написать функцию, которая берет этот набор и возвращает количество очков,\n// которое наша команда (x) набрала в чемпионате по приведенным выше правилам.\n\n// function points(games) {\n//   return games.reduce((pre, el) => {\n//     if (el[0] > el[2]) {\n//       return pre + 3;\n//     } else if (el[0] === el[2]) {\n//       return pre + 1;\n//     } else {\n//       return pre;\n//     }\n//   }, 0);\n// }\n\n// способ 2\nfunction points(games) {\n  return games.reduce(\n    (pre, el) => (el[0] > el[2] ? pre + 3 : el[0] === el[2] ? pre + 1 : pre),\n    0\n  );\n}\n\nconsole.log(\n  points(['1:0', '2:0', '3:0', '4:0', '2:1', '3:1', '4:1', '3:2', '4:2', '4:3'])\n);\n\n// 21.\n\nfunction sameCase(a, b) {\n  if (\n    (a === a.toLowerCase() && b === b.toLowerCase()) ||\n    (a === a.toUpperCase() && b === b.toUpperCase())\n  ) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nconsole.log(sameCase('C', 'B'));\nconsole.log(sameCase('C', 'b'));\n"],"names":["$1f0dc3b9307be026$var$removeUrlAnchor","url","arrey","split","includes","index1","indexOf","slice","join","console","log","n","i","push","length","$1f0dc3b9307be026$var$oddCount","str","arreyReverse","indexLastWord","map","$1f0dc3b9307be026$var$reverseWords","array","result","$1f0dc3b9307be026$var$index","s","minWord","el","$1f0dc3b9307be026$var$findShort","month","$1f0dc3b9307be026$var$pendulum","a","list","arr","sort","b","c","forEach","e","reverse","concat","$1f0dc3b9307be026$var$isFlush","cards","suitFirst","boolean","suit","$1f0dc3b9307be026$var$expressionMatter","Math","max","$1f0dc3b9307be026$var$sameCase","toLowerCase","toUpperCase","array1","array2","total","$1f0dc3b9307be026$var$hammingDistance","arrayReverse","word","$1f0dc3b9307be026$var$reverseWordsLetters","num","arraySquareEvDigit","numString","digit","Number","$1f0dc3b9307be026$var$squareDigits","start","end","$1f0dc3b9307be026$var$dontGiveMeFive","String","reduce","previousValue","value","factorial","p","$1f0dc3b9307be026$var$amIWilson","PI","toFixed","content","evap_per_day","threshold","days","gas","$1f0dc3b9307be026$var$evaporator","filter","ind","pre"],"version":3,"file":"index.3feada7c.js.map"}