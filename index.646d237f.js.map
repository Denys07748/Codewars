{"mappings":"AAgBA,IAuDkBA,EAAOC,EAAKC,EA2D9B,SAASC,EAAYC,EAAWC,GAC9B,MAAMC,EAAWF,EAAUG,QAAO,CAACC,EAAKC,IAAOD,EAAMC,GAAI,GACnDC,EAAYL,EAAUE,QAAO,CAACC,EAAKC,IAAOD,EAAMC,GAAI,GAC1D,IAAIE,EAAU,EACVC,EAAU,EAwBd,OAtBIR,EAAUS,QAAUR,EAAUQ,OAChCT,EAAUU,KAAI,CAACL,EAAIM,IACjBN,EAAKJ,EAAUU,GACXJ,IACAF,EAAKJ,EAAUU,GACfH,IACAH,GAAMJ,EAAUU,GAChB,EACAJ,MAGNN,EAAUS,KAAI,CAACL,EAAIM,IACjBN,EAAKL,EAAUW,GACXH,IACAH,EAAKL,EAAUW,GACfJ,IACAF,GAAML,EAAUW,GAChB,EACAH,MAIDD,EAAUC,KAEbD,EAAUC,IAEVN,GAAYI,EA9IlBM,QAAQC,IACI,CACR,CAAC,EAAG,EAAG,EAAG,EAAG,IACb,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,IACjB,CAAC,GAAI,GAAI,GAAI,GAAI,KARNC,SAAQC,GAAKA,EAAI,KAAIC,KAAK,OA6BzCJ,QAAQC,IAVR,SAA0BI,GACxB,MAAMC,EAAUD,EAAIE,MAAK,CAACC,EAAGC,IAAMD,EAAIC,IACvC,IAAIC,EAAM,EAEV,IAAK,IAAIX,EAAI,EAAGA,EAAIO,EAAQT,OAAS,EAAGE,IACtCW,GAAOJ,EAAQP,EAAI,GAAKO,EAAQP,GAElC,OAAOW,EAIPC,CAAiB,EAAC,GAAK,GAAG,GAAK,EAAG,IAAI,IAAK,GAAK,GAAG,IAAK,IAAK,GAAI,GAAI,KA+BvEX,QAAQC,KAPUjB,EAOG,CAAC,EAAG,EAAG,EAAG,GAPNC,EAOU,CAAC,EAAG,EAAG,EAAG,GAPfC,EAOmB,CAAC,EAAG,EAAG,GAAI,IALxD0B,KAAKC,OAAO7B,GAAS4B,KAAKE,OAAO7B,IACjC2B,KAAKC,OAAO7B,GAAS4B,KAAKE,OAAO5B,KA8BrCc,QAAQC,IAZgE,SAAnDc,EAAMC,GACzB,MAAMX,EAAM,GACZ,IAAK,IAAIN,EAAI,EAAGA,GAAKgB,EAAMhB,KAEtBA,EAAI,IAAIkB,MAAM,IAAI1B,QAAO,CAACC,EAAKC,IAAOD,EAAMoB,KAAKM,KAAKzB,EAAIuB,IAAM,KAAOjB,GAExEM,EAAIc,KAAKpB,GAGb,OAAOM,EAGGe,CAAY,IAAK,IA6D7BpB,QAAQC,IAAId,EAAY,CAAC,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,KAC1Ca,QAAQC,IAAId,EAAY,CAAC,GAAI,GAAI,EAAG,GAAI,CAAC,EAAG,EAAG,EAAG,KAWlD,MAKMkC,EAAO,IAHET,KAAKU,MAAMC,KAAqB,IAAIC,SAAS,EAAG,QAC/C,KAA2BA,SAAS,EAAG,OAIvDxB,QAAQC,IAAIoB","sources":["src/task1_1.js"],"sourcesContent":["// 1. CSV representation of array\n\n// Создайте функцию, которая возвращает CSV-представление двумерного числового массива.\n\n// Example: input: [\n//   [0, 1, 2, 3, 4],\n//   [10, 11, 12, 13, 14],\n//   [20, 21, 22, 23, 24],\n//   [30, 31, 32, 33, 34],\n// ];\n\n// output: '0,1,2,3,4\\n' +\n//   '10,11,12,13,14\\n' +\n//   '20,21,22,23,24\\n' +\n//   '30,31,32,33,34';\n\nfunction toCsvText(array) {\n  return array.flatMap(e => e + '').join('\\n');\n}\n\nconsole.log(\n  toCsvText([\n    [0, 1, 2, 3, 45],\n    [10, 11, 12, 13, 14],\n    [20, 21, 22, 23, 24],\n    [30, 31, 32, 33, 34],\n  ])\n);\n\n// 2. Sum of differences in array\n\n// Ваша задача — просуммировать различия между последовательными парами в массиве в порядке убывания.\n\n// Пример\n// [2, 1, 10]  -->  9\n\nfunction sumOfDifferences(arr) {\n  const arrSort = arr.sort((a, b) => a - b);\n  let sum = 0;\n\n  for (let i = 0; i < arrSort.length - 1; i++) {\n    sum += arrSort[i + 1] - arrSort[i];\n  }\n  return sum;\n}\n\nconsole.log(\n  sumOfDifferences([-13, 4, -19, 5, 15, -12, -20, 1, -13, -10, -7, -9, -5])\n);\n\n// 3. Another card game\n\n// Двенадцать карточек с оценками от 0 до 11, случайным образом разделенных между 3 игроками:\n// Фрэнком, Сэмом и Томом, по 4 карточки каждому. Игра состоит из 4 раундов.\n// Цель раунда — пройти по карте с наибольшим количеством очков.\n// В первом раунде первый игрок, у которого есть карта с 0 очков, делает первый ход,\n// и он начинает с этой картой. Затем второй игрок (очередь — Фрэнк -> Сэм -> Том -> Фрэнк и т. д.)\n// может ходить любой своей картой (каждая карта используется только один раз за игру,\n// и нет правил, требующих от игроков делать только лучшие ходы).\n// Третий игрок делает свой ход после второго игрока, и он видит предыдущие ходы.\n// Победитель предыдущего раунда делает первый ход в следующем раунде любой оставшейся картой.\n// Игрок, выигравший 2 раунда первым, побеждает в игре.\n\n// Задача\n// Верните true, если у Фрэнка есть шанс выиграть игру.\n// Верните false, если у Фрэнка нет шансов.\n\n// Вход\n// 3 массива по 4 уникальных числа в каждом (числа в массиве отсортированы по возрастанию).\n// Ввод всегда действителен, не нужно проверять.\n\nfunction solution(frank, sam, tom) {\n  return (\n    Math.max(...frank) > Math.min(...sam) &&\n    Math.max(...frank) > Math.min(...tom)\n  );\n}\n\nconsole.log(solution([0, 1, 4, 5], [2, 6, 7, 8], [3, 9, 10, 11]));\n\n// 4.Numbers Which Sum of Powers of Its Digits Is The Same Number\n\n// Не считая числа 1, число 153 является первым целым числом, обладающим этим свойством:\n// сумма третьей степени каждой его цифры равна 153. Посмотрите: 153 = 1³ + 5³ + 3³ = 1 + 125 + 27. = 153\n\n// Следующее число, которое экспериментирует с этим конкретным поведением, — 370 с той же мощностью.\n\n// Напишите функцию eq_sum_powdig(), которая находит числа ниже заданного верхнего предела hMax (включительно),\n// удовлетворяющие этому свойству, но с разными показателями степени в качестве степени цифр.\n\n// eq_sum_powdig(hMax, exp): ----> последовательность чисел (отсортированный список) (номер один не должен учитываться).\n\nfunction eqSumPowdig(hMax, exp) {\n  const arr = [];\n  for (let i = 2; i <= hMax; i++) {\n    if (\n      (i + '').split('').reduce((pre, el) => pre + Math.pow(+el, exp), 0) === i\n    ) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\nconsole.log(eqSumPowdig(370, 3));\n\n// 5.Survive the attack\n\n// Каждый солдат атакует солдата противника с тем же индексом массива. Выживший - это число с наибольшим значением.\n// Если значение одинаковое, они оба погибают\n// Если одно из значений пусто (различная длина массива), солдат с непустым значением выживает.\n// Чтобы выжить, обороняющаяся сторона должна иметь больше выживших, чем атакующая сторона.\n// В случае, если с обеих сторон одинаковое количество выживших,\n// побеждает команда с наибольшей начальной силой атаки. Если общая сила атаки обеих сторон одинакова, верните true.\n// Начальная сила атаки представляет собой сумму всех значений в каждом массиве.\n\n// EXAMPLES\n\n// attackers=[ 1, 3, 5, 7 ]   defenders=[ 2, 4, 6, 8 ]\n//0 survivors                4 survivors\n//return true\n\n// attackers=[ 1, 3, 5, 7 ]   defenders=[ 2, 4 ]\n//2 survivors  (16 damage)   2 survivors (6 damage)\n//return false\n\n// attackers=[ 1, 3, 5, 7 ]   defenders=[ 2, 4, 0, 8 ]\n//1 survivors                3 survivors\n//return true\n\nfunction hasSurvived(attackers, defenders) {\n  const attPowAt = attackers.reduce((pre, el) => pre + el, 0);\n  const attPowDef = defenders.reduce((pre, el) => pre + el, 0);\n  let attServ = 0;\n  let defServ = 0;\n\n  if (attackers.length >= defenders.length) {\n    attackers.map((el, i) =>\n      el > defenders[i]\n        ? attServ++\n        : el < defenders[i]\n        ? defServ++\n        : el == defenders[i]\n        ? 0\n        : attServ++\n    );\n  } else {\n    defenders.map((el, i) =>\n      el > attackers[i]\n        ? defServ++\n        : el < attackers[i]\n        ? attServ++\n        : el == attackers[i]\n        ? 0\n        : defServ++\n    );\n  }\n\n  return attServ < defServ\n    ? true\n    : attServ > defServ\n    ? false\n    : attPowAt <= attPowDef;\n}\n\nconsole.log(hasSurvived([2, 9], [1, 1, 3, 8]));\nconsole.log(hasSurvived([10, 10, 1, 1], [4, 4, 7, 7]));\n\n// ## Example 6 - Опертор % и методы строк\n\n// Напиши скрипт который переведёт значение `totalMinutes` (количество минут) в\n// строку в формате часов и минут `HH:MM`.\n\n// - 70 покажет 01:10\n// - 450 покажет 07:30\n// - 1441 покажет 24:01\n\nconst totalMinutes = 450;\n\nconst hours = (Math.floor(totalMinutes / 60) + '').padStart(2, '0');\nconst minutes = ((totalMinutes % 60) + '').padStart(2, '0');\n\nconst time = `${hours}:${minutes}`;\n\nconsole.log(time);\n"],"names":["frank","sam","tom","$aa0dc79a28274d23$var$hasSurvived","attackers","defenders","attPowAt","reduce","pre","el","attPowDef","attServ","defServ","length","map","i","console","log","flatMap","e","join","arr","arrSort","sort","a","b","sum","$aa0dc79a28274d23$var$sumOfDifferences","Math","max","min","hMax","exp","split","pow","push","$aa0dc79a28274d23$var$eqSumPowdig","$aa0dc79a28274d23$var$time","floor","$aa0dc79a28274d23$var$totalMinutes","padStart"],"version":3,"file":"index.646d237f.js.map"}