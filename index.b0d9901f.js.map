{"mappings":"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","sources":["node_modules/@swc/helpers/lib/_array_without_holes.js","node_modules/@swc/helpers/lib/_array_like_to_array.js","node_modules/@swc/helpers/lib/_iterable_to_array.js","node_modules/@swc/helpers/lib/_non_iterable_spread.js","node_modules/@swc/helpers/lib/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/lib/_to_consumable_array.js","src/task1_1.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayWithoutHoles;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return (0, _arrayLikeToArray).default(arr);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _arrayLikeToArray;\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _iterableToArray;\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _nonIterableSpread;\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _unsupportedIterableToArray;\nvar _arrayLikeToArray = _interopRequireDefault(require(\"./_array_like_to_array\"));\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, _arrayLikeToArray).default(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, _arrayLikeToArray).default(o, minLen);\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.default = _toConsumableArray;\nvar _arrayWithoutHoles = _interopRequireDefault(require(\"./_array_without_holes\"));\nvar _iterableToArray = _interopRequireDefault(require(\"./_iterable_to_array\"));\nvar _nonIterableSpread = _interopRequireDefault(require(\"./_non_iterable_spread\"));\nvar _unsupportedIterableToArray = _interopRequireDefault(require(\"./_unsupported_iterable_to_array\"));\nfunction _toConsumableArray(arr) {\n    return (0, _arrayWithoutHoles).default(arr) || (0, _iterableToArray).default(arr) || (0, _unsupportedIterableToArray).default(arr) || (0, _nonIterableSpread).default();\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n","// 1. CSV representation of array\n\n// Создайте функцию, которая возвращает CSV-представление двумерного числового массива.\n\n// Example: input: [\n//   [0, 1, 2, 3, 4],\n//   [10, 11, 12, 13, 14],\n//   [20, 21, 22, 23, 24],\n//   [30, 31, 32, 33, 34],\n// ];\n\n// output: '0,1,2,3,4\\n' +\n//   '10,11,12,13,14\\n' +\n//   '20,21,22,23,24\\n' +\n//   '30,31,32,33,34';\n\nfunction toCsvText(array) {\n  return array.flatMap(e => e + '').join('\\n');\n}\n\nconsole.log(\n  toCsvText([\n    [0, 1, 2, 3, 45],\n    [10, 11, 12, 13, 14],\n    [20, 21, 22, 23, 24],\n    [30, 31, 32, 33, 34],\n  ])\n);\n\n// 2. Sum of differences in array\n\n// Ваша задача — просуммировать различия между последовательными парами в массиве в порядке убывания.\n\n// Пример\n// [2, 1, 10]  -->  9\n\nfunction sumOfDifferences(arr) {\n  const arrSort = arr.sort((a, b) => a - b);\n  let sum = 0;\n\n  for (let i = 0; i < arrSort.length - 1; i++) {\n    sum += arrSort[i + 1] - arrSort[i];\n  }\n  return sum;\n}\n\nconsole.log(\n  sumOfDifferences([-13, 4, -19, 5, 15, -12, -20, 1, -13, -10, -7, -9, -5])\n);\n\n// 3. Another card game\n\n// Двенадцать карточек с оценками от 0 до 11, случайным образом разделенных между 3 игроками:\n// Фрэнком, Сэмом и Томом, по 4 карточки каждому. Игра состоит из 4 раундов.\n// Цель раунда — пройти по карте с наибольшим количеством очков.\n// В первом раунде первый игрок, у которого есть карта с 0 очков, делает первый ход,\n// и он начинает с этой картой. Затем второй игрок (очередь — Фрэнк -> Сэм -> Том -> Фрэнк и т. д.)\n// может ходить любой своей картой (каждая карта используется только один раз за игру,\n// и нет правил, требующих от игроков делать только лучшие ходы).\n// Третий игрок делает свой ход после второго игрока, и он видит предыдущие ходы.\n// Победитель предыдущего раунда делает первый ход в следующем раунде любой оставшейся картой.\n// Игрок, выигравший 2 раунда первым, побеждает в игре.\n\n// Задача\n// Верните true, если у Фрэнка есть шанс выиграть игру.\n// Верните false, если у Фрэнка нет шансов.\n\n// Вход\n// 3 массива по 4 уникальных числа в каждом (числа в массиве отсортированы по возрастанию).\n// Ввод всегда действителен, не нужно проверять.\n\nfunction solution(frank, sam, tom) {\n  return (\n    Math.max(...frank) > Math.min(...sam) &&\n    Math.max(...frank) > Math.min(...tom)\n  );\n}\n\nconsole.log(solution([0, 1, 4, 5], [2, 6, 7, 8], [3, 9, 10, 11]));\n\n// 4.Numbers Which Sum of Powers of Its Digits Is The Same Number\n\n// Не считая числа 1, число 153 является первым целым числом, обладающим этим свойством:\n// сумма третьей степени каждой его цифры равна 153. Посмотрите: 153 = 1³ + 5³ + 3³ = 1 + 125 + 27. = 153\n\n// Следующее число, которое экспериментирует с этим конкретным поведением, — 370 с той же мощностью.\n\n// Напишите функцию eq_sum_powdig(), которая находит числа ниже заданного верхнего предела hMax (включительно),\n// удовлетворяющие этому свойству, но с разными показателями степени в качестве степени цифр.\n\n// eq_sum_powdig(hMax, exp): ----> последовательность чисел (отсортированный список) (номер один не должен учитываться).\n\nfunction eqSumPowdig(hMax, exp) {\n  const arr = [];\n  for (let i = 2; i <= hMax; i++) {\n    if (\n      (i + '').split('').reduce((pre, el) => pre + Math.pow(+el, exp), 0) === i\n    ) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\nconsole.log(eqSumPowdig(370, 3));\n\n// 5.Survive the attack\n\n// Каждый солдат атакует солдата противника с тем же индексом массива. Выживший - это число с наибольшим значением.\n// Если значение одинаковое, они оба погибают\n// Если одно из значений пусто (различная длина массива), солдат с непустым значением выживает.\n// Чтобы выжить, обороняющаяся сторона должна иметь больше выживших, чем атакующая сторона.\n// В случае, если с обеих сторон одинаковое количество выживших,\n// побеждает команда с наибольшей начальной силой атаки. Если общая сила атаки обеих сторон одинакова, верните true.\n// Начальная сила атаки представляет собой сумму всех значений в каждом массиве.\n\n// EXAMPLES\n\n// attackers=[ 1, 3, 5, 7 ]   defenders=[ 2, 4, 6, 8 ]\n//0 survivors                4 survivors\n//return true\n\n// attackers=[ 1, 3, 5, 7 ]   defenders=[ 2, 4 ]\n//2 survivors  (16 damage)   2 survivors (6 damage)\n//return false\n\n// attackers=[ 1, 3, 5, 7 ]   defenders=[ 2, 4, 0, 8 ]\n//1 survivors                3 survivors\n//return true\n\nfunction hasSurvived(attackers, defenders) {\n  const attPowAt = attackers.reduce((pre, el) => pre + el, 0);\n  const attPowDef = defenders.reduce((pre, el) => pre + el, 0);\n  let attServ = 0;\n  let defServ = 0;\n\n  if (attackers.length >= defenders.length) {\n    attackers.map((el, i) =>\n      el > defenders[i]\n        ? attServ++\n        : el < defenders[i]\n        ? defServ++\n        : el == defenders[i]\n        ? 0\n        : attServ++\n    );\n  } else {\n    defenders.map((el, i) =>\n      el > attackers[i]\n        ? defServ++\n        : el < attackers[i]\n        ? attServ++\n        : el == attackers[i]\n        ? 0\n        : defServ++\n    );\n  }\n\n  return attServ < defServ\n    ? true\n    : attServ > defServ\n    ? false\n    : attPowAt <= attPowDef;\n}\n\nconsole.log(hasSurvived([2, 9], [1, 1, 3, 8]));\nconsole.log(hasSurvived([10, 10, 1, 1], [4, 4, 7, 7]));\n"],"names":["Object","defineProperty","module","exports","value","default","arr","Array","isArray","$f215c72f040a88cf$var$_arrayLikeToArray","obj","parcelRequire","__esModule","len","length","i","arr2","iter","Symbol","iterator","from","TypeError","o","minLen","$7a2c4c4c44c69707$var$_arrayLikeToArray","n","prototype","toString","call","slice","constructor","name","test","$6195f07b5409ba15$exports","$6195f07b5409ba15$var$_arrayWithoutHoles","$6195f07b5409ba15$var$_iterableToArray","$6195f07b5409ba15$var$_unsupportedIterableToArray","$6195f07b5409ba15$var$_nonIterableSpread","frank","sam","tom","_Math","_Math1","_Math2","_Math3","$6195f07b5409ba15$var$_interopRequireDefault","$3fcf9d9b25ceabaf$var$hasSurvived","attackers","defenders","attPowAt","reduce","pre","el","attPowDef","attServ","defServ","map","console","log","flatMap","e","join","arrSort","sort","a","b","sum","$3fcf9d9b25ceabaf$var$sumOfDifferences","Math","max","apply","$parcel$interopDefault","min","hMax","exp","split","pow","push","$3fcf9d9b25ceabaf$var$eqSumPowdig"],"version":3,"file":"index.b0d9901f.js.map"}