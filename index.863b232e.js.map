{"mappings":"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","sources":["src/index.js"],"sourcesContent":["// 1. Convert string to camel case\n\n// Завершите метод/функцию, чтобы он преобразовывал слова, разделенные\n// тире/подчеркиванием, в верблюжий регистр. Первое слово в выводе должно\n// быть написано с заглавной буквы только в том случае, если исходное\n// слово было написано с заглавной буквы (известный как верхний верблюжий\n// регистр, также часто называемый регистром Паскаля).\n\n// Examples\n// \"the-stealth-warrior\" gets converted to \"theStealthWarrior\"\n// \"The_Stealth_Warrior\" gets converted to \"TheStealthWarrior\"\n\nfunction toCamelCase(str) {}\n\n// describe('Tests', () => {\n//   it('test', () => {\n//     Test.assertEquals(\n//       toCamelCase(''),\n//       '',\n//       'An empty string was provided but not returned'\n//     );\n//     Test.assertEquals(\n//       toCamelCase('the_stealth_warrior'),\n//       'theStealthWarrior',\n//       \"toCamelCase('the_stealth_warrior') did not return correct value\"\n//     );\n//     Test.assertEquals(\n//       toCamelCase('The-Stealth-Warrior'),\n//       'TheStealthWarrior',\n//       \"toCamelCase('The-Stealth-Warrior') did not return correct value\"\n//     );\n//     Test.assertEquals(\n//       toCamelCase('A-B-C'),\n//       'ABC',\n//       \"toCamelCase('A-B-C') did not return correct value\"\n//     );\n//   });\n// });\n\n// 2.Count Odd Numbers below n\n\n// Учитывая число n, вернуть количество положительных нечетных чисел меньше n\n\n// Examples (Input -> Output)\n// 7  -> 3 (because odd numbers below 7 are [1, 3, 5])\n// 15 -> 7 (because odd numbers below 15 are [1, 3, 5, 7, 9, 11, 13])\n\nfunction oddCount(n) {\n  const arrey = [];\n\n  for (let i = 1; i < n; i += 1) {\n    if (i % 2 !== 0) {\n      arrey.push(i);\n    }\n  }\n\n  return arrey.length;\n}\n\n// describe('Basic tests', () => {\n//   it('Testing for fixed tests', () => {\n//     assert.strictEqual(oddCount(15), 7, 'Oops! Wrong.');\n//     assert.strictEqual(oddCount(15023), 7511, 'Oops! Wrong.');\n//   });\n// });\nconsole.log(oddCount(7));\n\n//3. Remove anchor from URL\n\n// Завершите функцию/метод, чтобы он возвращал URL-адрес с чем-либо после удаления привязки (#).\n\n// Examples\n// \"www.codewars.com#about\" --> \"www.codewars.com\"\n// \"www.codewars.com?page=1\" -->\"www.codewars.com?page=1\"\n\nfunction removeUrlAnchor(url) {\n  let arrey = url.split('');\n\n  if (arrey.includes('#')) {\n    const index = arrey.indexOf('#');\n    arrey = arrey.slice(0, index);\n  }\n\n  return arrey.join('');\n}\n\nconsole.log(removeUrlAnchor('www.codewars.com#about'));\n//   'www.codewars.com'\n\nconsole.log(removeUrlAnchor('www.codewars.com/katas/?page=1#about')),\n  //   'www.codewars.com/katas/?page=1'\n\n  console.log(removeUrlAnchor('www.codewars.com/katas/'));\n//   'www.codewars.com/katas/'\n\n// 4. Reversed Words\n\nfunction reverseWords(str) {\n  const arrey = str.split(' ');\n  const arreyReverse = [];\n  let indexLastWord = arrey.length - 1;\n\n  console.log(arrey);\n  arrey.map(() => {\n    arreyReverse.push(arrey[indexLastWord]);\n    indexLastWord -= 1;\n  });\n\n  console.log(arreyReverse);\n\n  str = arreyReverse.join(' ');\n\n  console.log(str);\n\n  return str; // reverse those words\n}\n\n// function reverseWords(str) {\n//   return str.split(' ').reverse().join(' ');\n// }\n\nconsole.log(reverseWords('hello world!'));\n\n// 5.N-th Power\n\n// Вам дан массив с положительными числами и неотрицательным числом N.\n// Нужно найти N-ю степень элемента в массиве с индексом N. Если N вне\n// массива, то вернуть -1. Не забывайте, что первый элемент имеет индекс 0.\n\nfunction index(array, n) {\n  if (!array[n]) {\n    return -1;\n  }\n  let result = array[n];\n\n  for (let i = 1; i < n; i++) {\n    result *= array[n];\n  }\n\n  return result;\n}\n\n// const index = (array, n) => array.length > n ? Math.pow(array[n], n) : -1;\n\nconsole.log(index([1, 3, 10, 100], 3));\n\n// 6.Shortest Word\n\n// Просто, учитывая строку слов, вернуть длину кратчайшего слова (слов).\n\n// Строка никогда не будет пустой, и вам не нужно учитывать разные типы данных.\n\nfunction findShort(s) {\n  const array = s.split(' ');\n  let minWord = array[0];\n\n  array.map(el => {\n    if (minWord.length > el.length) {\n      minWord = el;\n    }\n  });\n  return minWord.length;\n}\n\nconsole.log(findShort('bitcoin take over the world maybe who knows perhaps'));\n\n// 7.Quarter of the year\n\n// Дан месяц как целое число от 1 до 12, вернитесь к тому,\n// к какому кварталу года он принадлежит, как целое число.\n\n// Например: 2-й месяц (февраль) является частью первого квартала;\n// 6 месяц (июнь) входит во второй квартал; и месяц 11 (ноябрь) является частью четвертого квартала.\n\nconst quarterOf = month => {\n  if (month > 0 && month < 4) {\n    return 1;\n  } else if (month > 3 && month < 7) {\n    return 2;\n  } else if (month > 6 && month < 10) {\n    return 3;\n  } else if (month > 9) {\n    return 4;\n  }\n};\n\nconsole.log(quarterOf(7));\n\n// 7.Hamming Distance - Part 1: Binary codes\n\n// Расстояние Хэмминга двух строк одинаковой длины — это количество позиций,\n// в которых эти две строки различаются. Другими словами,\n// количество замен символов, необходимых для преобразования одной строки в другую.\n\n// Для этой первой Ката вы напишете функцию hamming_distance(a, b) с двумя строками\n// одинаковой длины, содержащими только 0 и 1 в качестве параметров.\n// Нет необходимости проверять параметры на достоверность (но вы можете, если хотите).\n// Выходом функции должно быть расстояние Хэмминга двух строк в виде целого числа.\n\nfunction hammingDistance(a, b) {\n  const array1 = a.split('');\n  const array2 = b.split('');\n  let total = 0;\n\n  array1.map((el, i, array) => {\n    if (el !== array2[i]) {\n      total += 1;\n    }\n  });\n  return total;\n}\n\nconsole.log(hammingDistance('1010', '0101'));\n\n// 8. Reverse words\n\n// Завершите функцию, которая принимает строковый параметр и переворачивает\n// каждое слово в строке. Все пробелы в строке должны быть сохранены.\n\nfunction reverseWordsLetters(str) {\n  const array = str.split(' ');\n  const arrayReverse = [];\n\n  array.map(word => arrayReverse.push(word.split('').reverse().join('')));\n\n  return arrayReverse.join(' ');\n}\n\nconsole.log(\n  reverseWordsLetters('The quick brown fox jumps over the lazy dog.')\n);\n\n// 9.Square Every Digit\n\n// Добро пожаловать. В этой ката вас просят возвести в квадрат каждую цифру числа и соединить их.\n\n// Например, если мы пропустим через функцию 9119, получится 811181, потому что 92 — это 81, а 12 — это 1.\n\n// Примечание. Функция принимает целое число и возвращает целое число.\n\nfunction squareDigits(num) {\n  const arraySquareEvDigit = [];\n  const numString = num + '';\n\n  console.log(numString);\n\n  numString.split('').map(digit => arraySquareEvDigit.push(digit ** 2));\n\n  console.log(arraySquareEvDigit);\n\n  return Number(arraySquareEvDigit.join(''));\n}\n\nconsole.log(squareDigits(3212));\n\n// 10.Don't give me five!\n\n// В этом ката вы получаете начальный номер и конечный номер региона и\n// должны вернуть количество всех чисел, кроме номеров с 5 в нем.\n// Начальный и конечный номер включительно!\n// Результат может содержать пятерки. ;-)\n// Начальный номер всегда будет меньше конечного. Оба числа могут быть и отрицательными!\n\nfunction dontGiveMeFive(start, end) {\n  const array = [];\n  for (let i = start; i <= end; i++) {\n    const str = i + '';\n    if (!str.split('').includes('5')) {\n      array.push(i);\n    }\n  }\n  return array.length;\n}\n\nconsole.log(dontGiveMeFive(4, 17));\n\n// 11.DNA to RNA Conversion\n\n// Рибонуклеиновая кислота, РНК, является основной молекулой-мессенджером в клетках.\n// РНК немного отличается от ДНК своей химической структурой и не содержит тимина.\n// В РНК тимин заменен другой нуклеиновой кислотой урацилом («U»).\n\n// Создайте функцию, которая переводит заданную строку ДНК в РНК.\n\n// function DNAtoRNA(dna) {\n//   return dna.replace(/T/g, 'U');\n// }\n\nfunction DNAtoRNA(dna) {\n  return dna.split('T').join('U');\n}\n\n// 12.Strong Number (Special Numbers Series #2)\n\n//Сильное число — это число, сумма факториала его цифр равна самому числу.\n// Например, 145 сильно, так как 1! + 4! + 5! = 1 + 24 + 120 = 145.\n// Учитывая число, найдите, является ли оно сильным или нет, и верните либо «СИЛЬНОЕ !!!!» или \"Не Сильный!!\".\n\nfunction strong(n) {\n  const total = String(n)\n    .split('')\n    .reduce((previousValue, value) => {\n      let factorial = 1;\n      for (let i = 1; i <= value; i++) {\n        factorial *= i;\n      }\n      return previousValue + factorial;\n    }, 0);\n\n  return n === total ? 'STRONG!!!!' : 'Not Strong !!';\n}\n\nconsole.log(strong(145));\n\n// 13.Wilson primes\n\n// Простые числа Вильсона удовлетворяют следующему условию. Пусть P представляет собой простое число.\n// Затем, ((P-1)! + 1) / (P * P)\n// должен дать целое число.\n// Ваша задача — создать функцию, возвращающую истину, если заданное число является простым числом Вильсона.\n\nfunction amIWilson(p) {\n  let factorial = 1;\n  for (let i = 1; i < p; i++) {\n    factorial *= i;\n  }\n  return (factorial + 1) % p ** 2 === 0 ? true : false;\n}\n\nconsole.log(amIWilson(5));\n"],"names":["$1f0dc3b9307be026$var$removeUrlAnchor","url","arrey","split","includes","index1","indexOf","slice","join","console","log","n","i","push","length","$1f0dc3b9307be026$var$oddCount","str","arreyReverse","indexLastWord","map","$1f0dc3b9307be026$var$reverseWords","array","result","$1f0dc3b9307be026$var$index","s","minWord","el","$1f0dc3b9307be026$var$findShort","month","a","b","array1","array2","total","$1f0dc3b9307be026$var$hammingDistance","arrayReverse","word","reverse","$1f0dc3b9307be026$var$reverseWordsLetters","num","arraySquareEvDigit","numString","digit","Number","$1f0dc3b9307be026$var$squareDigits","start","end","$1f0dc3b9307be026$var$dontGiveMeFive","String","reduce","previousValue","value","factorial","p","$1f0dc3b9307be026$var$amIWilson"],"version":3,"file":"index.863b232e.js.map"}